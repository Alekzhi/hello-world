sort1 uses: Bubble Sort

How do you know?: It is always the fastest with sorted numbers but the slowest in reversed ones.

sort2 uses: Merge Sort

How do you know?: It is consistent with being the fastest with random numbers except the sorted ones.

sort3 uses: Selection Sort

How do you know?: It always has almost the same speed in random or sorted numbers.


// test with random5000.txt
// sort1: 0.108s - 3rd
// sort2: 0.093s - 1st - fastest with random must be Merge Sort
// sort3: 0.104s - 2nd

// test with reversed5000.txt
// sort1: 0.083s - 3rd - slowest in reverse would be Bubble Sort
// sort2: 0.054s - 1st
// sort3: 0.067s - 2nd

// test with sorted5000.txt
// sort1: 0.049s - 1st - fastest with sorted must be Bubble Sort
// sort2: 0.052s - 2nd
// sort3: 0.070s - 3rd

// test with random10000.txt
// sort1: 0.255s - 3rd
// sort2: 0.086s - 1st
// sort3: 0.145s - 2nd - almost same speed with reversed and sorted, must be Selection Sort

// test with reversed10000.txt
// sort1: 0.228s - 3rd - slowest in reverse must be Bubble Sort
// sort2: 0.087s - 1st
// sort3: 0.152s - 2nd

// test with sorted10000.txt
// sort1: 0.078s - 1st - fastest must be Merge Sort
// sort2: 0.088s - 2nd
// sort3: 0.185s - 3rd

// test with random50000.txt
// sort1: 5.723s - 3rd
// sort2: 0.484s - 1st - consistent with being the fastest in unsorted
// sort3: 2.427s - 2nd - almost same speed with sorted: Selection Sort

// test with reversed50000.txt
// sort1: 4.784s - 3rd - interesting, this one is 1st in sorted numbers
// sort2: 0.508s - 1st -
// sort3: 2.608s - 2nd - consistent speed must be Selection Sort

// test with sorted50000.txt
// sort1: 0.407s - 1st - Bubble Sort is the best with sorted values
// sort2: 0.499s - 2nd -
// sort3: 2.353s - 3rd - almost same speed, Selection Sort
